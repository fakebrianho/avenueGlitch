import * as THREE from "three";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";
import Stars from "./stars.js";
import { RenderPass } from "three/examples/jsm/postprocessing/RenderPass.js";
import { UnrealBloomPass } from "three/examples/jsm/postprocessing/UnrealBloomPass.js";
import { EffectComposer } from "three/examples/jsm/postprocessing/EffectComposer.js";
import { DDSLoader } from "three/examples/jsm/loaders/DDSLoader.js";
import { MTLLoader } from "three/examples/jsm/loaders/MTLLoader.js";
import { OBJLoader } from "three/examples/jsm/loaders/OBJLoader.js";
/*------------------------------
Global Setup
------------------------------*/

const canvas = document.querySelector("canvas.webgl");
const scene = new THREE.Scene();
const renderer = new THREE.WebGLRenderer({
  canvas: canvas,
  // antialias: true,
  // alpha: true,
});
const geometry = new THREE.BoxGeometry(1, 1, 1);
const material = new THREE.MeshBasicMaterial({ color: 0xff0000 });
const mesh = new THREE.Mesh(geometry, material);
// scene.add(mesh);

// let tempPos = new THREE.Vector3();
// let tempObj = new THREE.Object3D();
// tempObj.position.set(0, 0, 0);
// tempObj.updateMatrix();
// mesh.setMatrixAt(1, tempObj.matrix);
const raycaster = new THREE.Raycaster();
const pointer = new THREE.Vector2();
var dummy = new THREE.Object3D();
var sectionWidth = 1;

/*------------------------------
3D Objects
------------------------------*/
// Prunus_Pendula.obj
// Prunus_Pendula.mtl
// const onProgress = function (xhr) {
//   if (xhr.lengthComputable) {
//     const percentComplete = (xhr.loaded / xhr.total) * 100;
//     console.log(Math.round(percentComplete, 2) + "% downloaded");
//   }
// };

// const onError = function () {};

// const manager = new THREE.LoadingManager();
// manager.addHandler(/\.dds$/i, new DDSLoader());

// // comment in the following line and import TGALoader if your asset uses TGA textures
// // manager.addHandler( /\.tga$/i, new TGALoader() );

// new MTLLoader(manager).load("assets/Prunus_Pendula.mtl", function (materials) {
//   materials.preload();

//   new OBJLoader(manager).setMaterials(materials).load(
//     "assets/Prunus_Pendula.obj",
//     function (object) {
//       object.scale.set(0.05, 0.05, 0.05);
//       scene.add(object);
//     },
//     onProgress,
//     onError
//   );
// });
/*------------------------------
Lights
------------------------------*/
// const light = new THREE.PointLight(0xff0000, 1, 100);
// light.position.set(0, 5, 0);
// scene.add(light);
// const sphereSize = 5;
// const pointLightHelper = new THREE.PointLightHelper(light, sphereSize);
// scene.add(pointLightHelper);
// const lights = new THREE.AmbientLight(0x404040); // soft white light
// scene.add(lights);
/*------------------------------
Particle
------------------------------*/
const mat = new THREE.PointsMaterial({
  sizeAttenuation: true,
  transparent: true,
  alphaTest: 0.001,
  // size: 0.1,
  alphaMap: new THREE.TextureLoader().load("assets/4.png"),
  // map: new THREE.TextureLoader().load("assets/4.png"),
  depthWrite: false,
  blending: THREE.AdditiveBlending,
  vertexColors: true,
});
const position = [];
const colors = [];
const size = [];
const count = 300;
const particleSize = 5;
for (let i = 0; i < count; i++) {
  const i3 = i * 3;
  colors[i3] = 255;
  colors[i3 + 1] = 10;
  colors[i3 + 2] = 205;
}
for (let i = 0; i < count * 3; i++) {
  let x = (Math.random() - 0.5) * 10;
  position[i] = x;
  size[i] = particleSize * 0.5;
}
const geo = new THREE.BufferGeometry();
geo.setAttribute("position", new THREE.Float32BufferAttribute(position, 3));
geo.setAttribute("color", new THREE.Float32BufferAttribute(colors, 3));
geo.setAttribute("size", new THREE.Float32BufferAttribute(size, 1));

const p = new THREE.Points(geo, mat);
scene.add(p);

/*------------------------------
Dimensions
------------------------------*/
const sizes = {
  width: window.innerWidth,
  height: window.innerHeight,
};

const camera = new THREE.PerspectiveCamera(
  75,
  sizes.width / sizes.height,
  0.0001,
  10000
);
camera.position.z = 2;
scene.add(camera);

renderer.setSize(sizes.width, sizes.height);
renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
/*------------------------------
Raycast
------------------------------*/
window.addEventListener("pointerdown", (event) => {
  pointer.x = (event.clientX / window.innerWidth) * 2 - 1;
  pointer.y = -(event.clientY / window.innerHeight) * 2 + 1;
  raycaster.setFromCamera(pointer, camera);
  const intersects = raycaster.intersectObjects(scene.children, false);
  if (intersects.length > 0) {
    const object = intersects[0].index;
    alert(object);
    animate();
  }
});
/*------------------------------
Post 
------------------------------*/
const renderScene = new RenderPass(scene, camera);
const bloomPass = new UnrealBloomPass(
  new THREE.Vector2(window.innerWidth, window.innerHeight),
  1.5,
  0.4,
  0.85
);
bloomPass.threshold = 0;
bloomPass.strength = 0.6;
const composer = new EffectComposer(renderer);
composer.addPass(renderScene);
composer.addPass(bloomPass);

/*------------------------------
Resize
------------------------------*/
window.addEventListener("resize", () => {
  /*------------------------------
  Update Sizes
  ------------------------------*/
  sizes.width = window.innerWidth;
  sizes.height = window.innerHeight;
  /*------------------------------
  Update Camera
  ------------------------------*/
  camera.aspect = sizes.width / sizes.height;
  camera.updateProjectionMatrix();
  /*------------------------------
  Update Renderer
  ------------------------------*/
  renderer.setSize(sizes.width, sizes.height);
  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
  /*------------------------------
  Update Post
  ------------------------------*/
  composer.setSize(sizes.width, sizes.height);
  bloomPass.setSize(sizes.width, sizes.height);
});

/*------------------------------
Controls
------------------------------*/
const controls = new OrbitControls(camera, canvas);
// const controls = new DeviceOrientationControls(camera, true);
controls.enableDamping = true;

/*------------------------------
Fullscreen Function
------------------------------*/
window.addEventListener("dblclick", () => {
  if (!document.fullscreenElement) {
    canvas.requestFullscreen();
  } else {
    document.exitFullscreen();
  }
});
const clock = new THREE.Clock();
const animate = () => {
  /*------------------------------
  Smooth Animation
  ------------------------------*/
  const elapsedTime = clock.getElapsedTime();

  /*------------------------------
  Update Controls
  ------------------------------*/
  controls.update();

  /*------------------------------
  Update Meshes
  ------------------------------*/
  // mesh.rotation.x = elapsedTime;
  // mesh.rotation.y = elapsedTime;
  // mesh.rotation.y = device.angleY();

  /*------------------------------
  Render
  ------------------------------*/
  composer.render();
  // renderer.render(scene, camera);

  /*------------------------------
  Core
  ------------------------------*/
  window.requestAnimationFrame(animate);
};

animate();
